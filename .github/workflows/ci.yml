name: ci
run-name: Run CI

on:
  push:
    paths-ignore:
      - '**/*.md'
      - '**/Dockerfile'
      - .docker/**
      - .vscode/**
      - .dockerignore
      - .editorconfig
      - coverage/**
      - docker-compose*
      - README.md

concurrency: ${{ github.workflow }}

jobs:
  ci:
    name: Run CI
    permissions:
      contents: read
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create test database
        env:
          DB_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          docker pull mysql:8.0.28
          docker run --name footballscoreboard_testdb -e MYSQL_ROOT_PASSWORD="$DB_ROOT_PASSWORD" -e MYSQL_USER="$DB_USER" -e MYSQL_PASSWORD="$DB_PASSWORD" -e MYSQL_DATABASE=${{ vars.DB_NAME }} -p 3306:3306 -v ${{github.workspace}}/scripts/testdb:/docker-entrypoint-initdb.d -d mysql:8.0.28

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: global.json

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: bash
        run: |
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner

      - name: Cache coverage tool
        id: cache-coverage-tool
        uses: actions/cache@v4
        with:
          path: ./.tools/coverage
          key: ${{ runner.os }}-coverage-tool
          restore-keys: ${{ runner.os }}-coverage-tool

      - name: Install Coverage Tool
        if: steps.cache-coverage-tool.outputs.cache-hit != 'true'
        shell: bash
        run: |
          dotnet tool update dotnet-coverage --tool-path ./.tools/coverage

      - name: Run Sonar scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          MYSQLCONNSTR_FootballDbConnection: Server=localhost;Database=${{ vars.DB_NAME }};Uid=${{ secrets.DB_USER }};Pwd=${{ secrets.DB_PASSWORD }};
        run: |
          ./.sonar/scanner/dotnet-sonarscanner begin /k:"rolspace_blazor-football-scoreboard" /o:"rolspace" \
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.cs.vscoveragexml.reportsPaths="coverage.xml" \
            /d:sonar.inclusions="**/src/**" /d:sonar.test.inclusions="**/tests/**" \

          dotnet restore
          dotnet build --configuration Release --no-restore
          ./.tools/coverage/dotnet-coverage collect 'dotnet test --no-restore' -f xml  -o 'coverage.xml'

          ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
