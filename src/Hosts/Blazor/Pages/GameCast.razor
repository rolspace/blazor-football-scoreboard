@page "/game/{GameId:int}"

@using System.Net.Http
@using Football.Application.Features.Games.Models
@using Football.Application.Features.Plays.Models
@using Football.Application.Features.Stats.Models
@using Football.Blazor.Components

@inherits GameComponentBase

<div class="mdc-layout-grid__inner">
    @if (previousPlay is null && !errorOcurred)
    {
        <div>Loading</div>
    }
    else if (previousPlay is null)
    {
        <div>An error ocurred. The game could not be loaded.</div>
    }
    else
    {
        <!-- Back button row -->
        <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-12">
            <NavLink href="/">
                <span class="mdc-typography--body2">Back</span>
            </NavLink>
        </div>
        <!-- GameCast title -->
        <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-12" style="text-align:center">
            <span class="mdc-typography--body2">@previousPlay.AwayTeam @@ @previousPlay.HomeTeam</span>
        </div>
        <!-- GameCast layout -->
        <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-2-tablet mdc-layout-grid__cell--span-4-desktop"></div>
        <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-4-tablet mdc-layout-grid__cell--span-4-desktop">
            <div class="mdc-layout-grid__inner">
                <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-8-tablet mdc-layout-grid__cell--span-12-desktop">
                    <GameCard GameId="@previousPlay.GameId" Play="@previousPlay" />
                </div>
            </div>
        </div>
        <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-2-tablet mdc-layout-grid__cell--span-4-desktop"></div>
        <!-- GameCast title -->
        <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-12" style="text-align:center">
            <span class="mdc-typography--body2">Stats</span>
        </div>
        <!-- GameStats layout -->
        <StatsTable Team="@previousPlay.HomeTeam" TeamStats=@homeTeamStats />
        <StatsTable Team="@previousPlay.AwayTeam" TeamStats=@awayTeamStats />
    }
</div>

@code {
    private PlayDto? previousPlay = null;
    private StatDto? homeTeamStats = null;
    private StatDto? awayTeamStats = null;

    [Parameter]
    public int GameId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            HttpClient httpClient = HttpClientFactory.CreateClient(Constants.DefaultHttpClient);
            GameDto? game = await httpClient.GetFromJsonAsync<GameDto>($"games/{GameId}");

            if (game is null) throw new Exception("Game not found.");

            previousPlay = GetPreviousPlayFromGame(game);

            GameStatDto? gameStats = await httpClient.GetFromJsonAsync<GameStatDto>($"games/{GameId}/stats");
            homeTeamStats = gameStats?.Stats.Find(s => s.Home);
            awayTeamStats = gameStats?.Stats.Find(s => !s.Home);

            await InitializeHubConnection(async (nextPlay) =>
            {
                if (GameId == nextPlay.GameId)
                {
                    previousPlay = new PlayDto
                    {
                        Id = nextPlay.Id,
                        HomeTeam = nextPlay.HomeTeam,
                        HomeScore = nextPlay.HomeScore,
                        AwayTeam = nextPlay.AwayTeam,
                        AwayScore = nextPlay.AwayScore,
                        Quarter = nextPlay.Quarter,
                        QuarterSecondsRemaining = nextPlay.QuarterSecondsRemaining,
                        Description = nextPlay.Description
                    };

                    GameStatDto? updatedGameStats = await httpClient.GetFromJsonAsync<GameStatDto>($"games/{GameId}/stats");
                    homeTeamStats = updatedGameStats?.Stats.Find(s => s.Home);
                    awayTeamStats = updatedGameStats?.Stats.Find(s => !s.Home);

                    StateHasChanged();
                }
            });
        }
        catch (Exception ex)
        {
            errorOcurred = true;
            Logger.LogError(ex, "GameCast page: There was an error loading the game data.");
        }
    }
}
