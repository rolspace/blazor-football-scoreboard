@page "/game/{GameId:int}"

@using System.Net.Http
@using Football.Application.Features.Games.Models
@using Football.Application.Features.Plays.Models
@using Football.Application.Features.Stats.Models
@using Football.Application.Interfaces
@using Football.Infrastructure.Extensions
@using Microsoft.AspNetCore.SignalR.Client
@using Serilog
@using Serilog.Extensions.Logging

@inject IHttpClientFactory HttpClientFactory
@inject IHubConnectionFactory<HubConnection> HubConnectionFactory
@inject NavigationManager NavigationManager


<div class="mdc-layout-grid__inner">
    @if (currentPlay is null && !errorOcurred)
    {
        <div>Loading</div>
    }
    else if (currentPlay is null)
    {
        <div>An error ocurred. The game could not be loaded.</div>
    }
    else
    {
        <!-- Back button row -->
        <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-12">
            <NavLink href="/">
                <span class="mdc-typography--body2">Back</span>
            </NavLink>
        </div>
        <!-- GameCast title -->
        <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-12" style="text-align:center">
            <span class="mdc-typography--body2">@currentPlay.AwayTeam @@ @currentPlay.HomeTeam</span>
        </div>
        <!-- GameCast layout -->
        <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-2-tablet mdc-layout-grid__cell--span-4-desktop"></div>
        <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-4-tablet mdc-layout-grid__cell--span-4-desktop">
            <div class="mdc-layout-grid__inner">
                <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-8-tablet mdc-layout-grid__cell--span-12-desktop">
                    <GameCard GameId="@currentPlay.GameId" Play="@currentPlay" />
                </div>
            </div>
        </div>
        <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-2-tablet mdc-layout-grid__cell--span-4-desktop"></div>
        <!-- GameCast title -->
        <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-12" style="text-align:center">
            <span class="mdc-typography--body2">Stats</span>
        </div>
        <!-- GameStats layout -->
        <StatsTable Team="@currentPlay.HomeTeam" TeamStats=@homeTeamStats />
        <StatsTable Team="@currentPlay.AwayTeam" TeamStats=@awayTeamStats />
    }
</div>

@code {
    private bool errorOcurred = false;

    private HubConnection? hubConnection;

    private PlayDto? currentPlay = null;

    private StatDto? homeTeamStats = null;

    private StatDto? awayTeamStats = null;

    [Parameter]
    public int GameId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            HttpClient httpClient = HttpClientFactory.CreateClient(Constants.DefaultHttpClient);
            GameDto? game = await httpClient.GetFromJsonAsync<GameDto>($"games/{GameId}");

            if (game is null) throw new Exception("Game not found.");

            currentPlay = new PlayDto
            {
                Id = 0,
                GameId = game.Id,
                HomeTeam = game.HomeTeam,
                HomeScore = game.HomeScore,
                AwayTeam = game.AwayTeam,
                AwayScore = game.AwayScore,
                Quarter = game.Quarter,
                QuarterSecondsRemaining = game.QuarterSecondsRemaining
            };

            GameStatDto? gameStats = await httpClient.GetFromJsonAsync<GameStatDto>($"games/{GameId}/stats");
            homeTeamStats = gameStats?.Stats.Find(s => s.Home);
            awayTeamStats = gameStats?.Stats.Find(s => !s.Home);

            hubConnection = HubConnectionFactory.CreateHubConnection();
            hubConnection.On<PlayDto>("ReceivePlay", async (nextPlay) =>
            {
                if (GameId == nextPlay.GameId)
                {
                    currentPlay = new PlayDto
                    {
                        Id = nextPlay.Id,
                        HomeTeam = nextPlay.HomeTeam,
                        HomeScore = nextPlay.HomeScore,
                        AwayTeam = nextPlay.AwayTeam,
                        AwayScore = nextPlay.AwayScore,
                        Quarter = nextPlay.Quarter,
                        QuarterSecondsRemaining = nextPlay.QuarterSecondsRemaining,
                        Description = nextPlay.Description
                    };

                    GameStatDto? updatedGameStats = await httpClient.GetFromJsonAsync<GameStatDto>($"games/{GameId}/stats");
                    homeTeamStats = updatedGameStats?.Stats.Find(s => s.Home);
                    awayTeamStats = updatedGameStats?.Stats.Find(s => !s.Home);
                };

                StateHasChanged();
            });

            await hubConnection.StartWithRetryAsync(new CancellationToken());
        }
        catch (Exception ex)
        {
            errorOcurred = true;
            Log.Error(ex, "GameCast page: There was an error loading the game data.");
        }
    }
}
