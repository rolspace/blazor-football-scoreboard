@page "/game/{GameId:int}"

@using System.Net.Http
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Logging
@using Football.Blazor.Shared.Components

@inject Settings.ScoreboardSettings ScoreboardSettings
@inject HttpClient Http
@inject ILoggerProvider LoggerProvider
@inject ILogger<GameCast> Logger
@inject NavigationManager NavigationManager

<div class="mdc-layout-grid__inner">
    @if (gameState is null && !errorOcurred)
    {
        <div>Loading</div>
    }
    else if (gameState is null && errorOcurred)
    {
        <div>An error ocurred. The game could not be loaded.</div>
    }
    else if (gameState is not null)
    {
        <!-- Title row -->
        <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-4"></div>
        <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-4">Game Page @gameState.AwayTeam vs.
        @gameState.HomeTeam</div>
        <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-4"></div>
        <!-- Game Card row -->
        <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-4"></div>
        <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-4">
            <GameCard GameId="@gameState.Id" AwayTeam="@gameState.AwayTeam" AwayScore=@gameState.AwayScore
            HomeTeam="@gameState.HomeTeam" HomeScore=@gameState.HomeScore
            QuarterTimeRemaining="@gameState.QuarterTimeRemaining" LastPlayDescription="@gameState.PlayDescription" />
        </div>
        <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-4"></div>
    }
</div>

@code {
    private bool errorOcurred = false;

    private HubConnection? hubConnection;

    private GameState? gameState = null;

    [Parameter]
    public int GameId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var apiUri = new Uri(AppSettings.ApiEndpoint ?? throw new Exception("ApiEndpoint missing"));
            var game = await Http.GetFromJsonAsync<Game>(new Uri(apiUri, $"games/{GameId}"));

            if (game is null) throw new Exception("Game cannot be null");

            Stat? homeStat = game.Stats?.FirstOrDefault(stat => stat.Team == game.HomeTeam);
            Stat? awayStat = game.Stats?.FirstOrDefault(stat => stat.Team == game.AwayTeam);

            gameState = new GameState
            {
                Id = game.Id,
                Week = game.Week,
                HomeTeam = game.HomeTeam,
                HomeScore = homeStat?.Score ?? 0,
                AwayTeam = game.AwayTeam,
                AwayScore = awayStat?.Score ?? 0,
                Quarter = game.Time?.Quarter ?? 1,
                QuarterSecondsRemaining = game.Time?.QuarterSecondsRemaining ?? 900,
            };

            Uri hubUri = new Uri(AppSettings.HubEndpoint ?? throw new Exception("HubEnpoint missing"));

            hubConnection = new HubConnectionBuilder().WithUrl(hubUri).ConfigureLogging(loggingBuilder =>
            loggingBuilder.AddProvider(LoggerProvider)).Build();

            hubConnection.On<Play>("ReceivePlay", (play) =>
            {
                if (GameId == play.Game.Id)
                {
                    gameState = new GameState
                    {
                        Id = play.Game.Id,
                        HomeTeam = play.Game.HomeTeam,
                        HomeScore = play.HomeScore,
                        AwayTeam = play.Game.AwayTeam,
                        AwayScore = play.AwayScore,
                        Quarter = play.Quarter,
                        QuarterSecondsRemaining = play.QuarterSecondsRemaining,
                        PlayDescription = play.Description
                    };
                };

                StateHasChanged();
            });

            await hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            errorOcurred = true;
            Logger.LogError(ex.ToString());
        }
    }
}
