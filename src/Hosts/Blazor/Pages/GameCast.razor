@page "/game/{GameId:int}"

@using System.Net.Http
@using Football.Application.Models
@using Football.Blazor.Shared.Components
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Logging

@inject Settings.ScoreboardSettings ScoreboardSettings
@inject HttpClient Http
@inject ILoggerProvider LoggerProvider
@inject ILogger<GameCast> Logger
@inject NavigationManager NavigationManager

<div class="mdc-layout-grid__inner">
    @if (play is null && !errorOcurred)
    {
        <div>Loading</div>
    }
    else if (play is null && errorOcurred)
    {
        <div>An error ocurred. The game could not be loaded.</div>
    }
    else if (play is not null)
    {
        <!-- Title row -->
        <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-4"></div>
        <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-4">Game Page @play.AwayTeam vs. @play.HomeTeam</div>
        <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-4"></div>
        <!-- Game Card row -->
        <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-4"></div>
        <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-4">
            <GameCard GameId="@play.Id" AwayTeam="@play.AwayTeam" AwayScore=@play.AwayScore
            HomeTeam="@play.HomeTeam" HomeScore=@play.HomeScore
            QuarterTimeRemaining="@play.QuarterTimeRemaining" LastPlayDescription="@play.Description" />
        </div>
        <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-4"></div>
    }
</div>

@code {
    private bool errorOcurred = false;

    private HubConnection? hubConnection;

    private PlayDto? play = null;

    [Parameter]
    public int GameId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Uri apiUri = new Uri(ScoreboardSettings.ApiBaseUrl ?? throw new Exception("ApiBaseUrl setting is not defined."));
            GameDto? game = await Http.GetFromJsonAsync<GameDto>(new Uri(apiUri, $"games/{GameId}"));

            if (game is null) throw new Exception("Game not found.");

            play = new PlayDto
            {
                Id = game.Id,
                HomeTeam = game.HomeTeam,
                HomeScore = game.HomeScore,
                AwayTeam = game.AwayTeam,
                AwayScore = game.AwayScore,
                Quarter = game.Quarter,
                QuarterSecondsRemaining = game.QuarterSecondsRemaining,
            };

            Uri hubUri = new Uri(ScoreboardSettings.HubUrl ?? throw new Exception("HubUrl setting is not defined."));

            hubConnection = new HubConnectionBuilder()
                .WithUrl(hubUri)
                .ConfigureLogging(loggingBuilder => loggingBuilder.AddProvider(LoggerProvider)).Build();

            hubConnection.On<PlayDto>("ReceivePlay", (play) =>
            {
                if (GameId == play.Id)
                {
                    this.play = new PlayDto
                    {
                        Id = play.Id,
                        HomeTeam = play.HomeTeam,
                        HomeScore = play.HomeScore,
                        AwayTeam = play.AwayTeam,
                        AwayScore = play.AwayScore,
                        Quarter = play.Quarter,
                        QuarterSecondsRemaining = play.QuarterSecondsRemaining,
                        Description = play.Description
                    };
                };

                StateHasChanged();
            });

            await hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            errorOcurred = true;
            Logger.LogError(ex.ToString());
        }
    }
}
