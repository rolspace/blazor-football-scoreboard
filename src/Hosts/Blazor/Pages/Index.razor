@page "/"

@using System.Net.Http
@using Football.Application.Features.Games.Models
@using Football.Application.Features.Plays.Models
@using Football.Application.Interfaces
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Options
@using Options
@using Serilog
@using Serilog.Extensions.Logging

@inject HttpClient HttpClient
@inject IHubConnectionFactory<HubConnection> HubConnectionFactory
@inject IOptions<ApiOptions> ApiOptionsAccessor
@inject NavigationManager NavigationManager

<div class="mdc-layout-grid__inner">
    <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-12" style="text-align: center">
        <span class="mdc-typography--body2">Games</span>
    </div>
    <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-2-tablet mdc-layout-grid__cell--span-2-desktop"></div>
    <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-4-tablet mdc-layout-grid__cell--span-8-desktop">
        <div class="mdc-layout-grid__inner">
            @if (currentPlays.Count() > 0)
            {
                foreach (var currentPlay in currentPlays)
                {
                    <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-8-tablet mdc-layout-grid__cell--span-6-desktop">
                        <GameCard GameId="@currentPlay.GameId" Play="@currentPlay" />
                    </div>
                }
            }
            else if (!errorOcurred)
            {
                <div>Loading</div>
            }
            else if (errorOcurred)
            {
                <div>An error ocurred. The games could not be loaded.</div>
            }
        </div>
    </div>
    <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-2-tablet mdc-layout-grid__cell--span-2-desktop"></div>
</div>

@code {
    private bool errorOcurred = false;

    private ApiOptions ApiOptions => ApiOptionsAccessor.Value;

    private HubConnection? hubConnection;

    private IReadOnlyList<PlayDto> currentPlays = new List<PlayDto>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Uri apiUri = new Uri(ApiOptions.ApiBaseUrl ?? throw new Exception("ApiBaseUrl setting is not defined."));
            GameDto[]? games = await HttpClient.GetFromJsonAsync<GameDto[]>(new Uri(apiUri, $"games/now"));

            hubConnection = HubConnectionFactory.CreateHubConnection();

            if (games is not null && games.Count() > 0)
            {
                currentPlays = games.Select(game =>
                {
                    return new PlayDto
                    {
                        Id = 0,
                        GameId = game.Id,
                        HomeTeam = game.HomeTeam,
                        HomeScore = game.HomeScore,
                        AwayTeam = game.AwayTeam,
                        AwayScore = game.AwayScore,
                        Quarter = game.Quarter,
                        QuarterSecondsRemaining = game.QuarterSecondsRemaining
                    };
                }).ToList();

                hubConnection.On<PlayDto>("ReceivePlay", (nextPlay) =>
                {
                    PlayDto newPlay = currentPlays.Single(play => play.GameId == nextPlay.GameId);
                    newPlay.HomeScore = nextPlay.HomeScore;
                    newPlay.AwayScore = nextPlay.AwayScore;
                    newPlay.Quarter = nextPlay.Quarter;
                    newPlay.QuarterSecondsRemaining = nextPlay.QuarterSecondsRemaining;
                    newPlay.Description = nextPlay.Description;

                    StateHasChanged();
                });

                await hubConnection.StartAsync(new CancellationToken());
            }
        }
        catch (Exception ex)
        {
            errorOcurred = true;
            Log.Error(ex, "Index page: There was an error loading the game data.");
        }
    }
}
