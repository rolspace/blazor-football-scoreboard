@page "/"
@using System.Net.Http
@using Football.Application.Features.Games.Models
@using Football.Application.Features.Plays.Models
@using Football.Blazor.Components

@inherits GameComponentBase

<div class="mdc-layout-grid__inner">
    <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-12" style="text-align: center">
        <span class="mdc-typography--body2">Games</span>
    </div>
    <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-2-tablet mdc-layout-grid__cell--span-2-desktop"></div>
    <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-4-tablet mdc-layout-grid__cell--span-8-desktop">
        <div class="mdc-layout-grid__inner">
            @if (previousPlays.Count() > 0)
            {
                foreach (var currentPlay in previousPlays)
                {
                    <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-8-tablet mdc-layout-grid__cell--span-6-desktop">
                        <GameCard GameId="@currentPlay.GameId" Play="@currentPlay" />
                    </div>
                }
            }
            else if (!errorOcurred)
            {
                <div>Loading</div>
            }
            else if (errorOcurred)
            {
                <div>An error ocurred. The games could not be loaded.</div>
            }
        </div>
    </div>
    <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-2-tablet mdc-layout-grid__cell--span-2-desktop"></div>
</div>

@code {
    private IReadOnlyList<PlayDto> previousPlays = new List<PlayDto>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            HttpClient httpClient = HttpClientFactory.CreateClient(Constants.DefaultHttpClient);
            GameDto[]? games = await httpClient.GetFromJsonAsync<GameDto[]>($"games/now");

            if (games is not null && games.Count() > 0)
            {
                previousPlays = games.Select(game => GetPreviousPlayFromGame(game)).ToList();

                await InitializeHubConnection((nextPlay) =>
                {
                    PlayDto newPlay = previousPlays.Single(play => play.GameId == nextPlay.GameId);
                    newPlay.HomeScore = nextPlay.HomeScore;
                    newPlay.AwayScore = nextPlay.AwayScore;
                    newPlay.Quarter = nextPlay.Quarter;
                    newPlay.QuarterSecondsRemaining = nextPlay.QuarterSecondsRemaining;
                    newPlay.Description = nextPlay.Description;

                    StateHasChanged();
                });
            }
        }
        catch (Exception ex)
        {
            errorOcurred = true;
            Logger.LogError(ex, "Index page: There was an error loading the game data.");
        }
    }
}
