@page "/"

@using System.Net.Http
@using Football.Application.Models
@using Football.Blazor.Shared.Components
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Logging

@inject Settings.ScoreboardSettings ScoreboardSettings
@inject HttpClient Http
@inject ILoggerProvider LoggerProvider
@inject ILogger<Index> Logger
@inject NavigationManager NavigationManager

<div class="mdc-layout-grid__inner">
    <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-2-tablet mdc-layout-grid__cell--span-3-desktop"></div>
    <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-4-tablet mdc-layout-grid__cell--span-6-desktop">
        <div class="mdc-layout-grid__inner score-grid">
            @if (plays.Count() == 0 && !errorOcurred)
            {
                <div>Loading</div>
            }
            else if (plays.Count() == 0 && errorOcurred)
            {
                <div>An error ocurred. The game could not be loaded.</div>
            }
            else if (plays.Count() > 0)
            {
                foreach (var currentPlay in plays)
                {
                    <GameCard GameId="@currentPlay.Id" AwayTeam="@currentPlay.AwayTeam" AwayScore=@currentPlay.AwayScore
                        HomeTeam="@currentPlay.HomeTeam" HomeScore=@currentPlay.HomeScore
                        QuarterTimeRemaining="@currentPlay.QuarterTimeRemaining"
                        LastPlayDescription="@currentPlay.Description" />
                }
            }
        </div>
    </div>
</div>

@code {
    private bool errorOcurred = false;

    private HubConnection? hubConnection;

    private IReadOnlyList<PlayDto> plays = new List<PlayDto>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Uri apiUri = new Uri(ScoreboardSettings.ApiBaseUrl ?? throw new Exception("ApiBaseUrl setting is not defined."));
            var games = await Http.GetFromJsonAsync<GameDto[]>(new Uri(apiUri, $"games?week={ScoreboardSettings.Week}"));

            if (games is not null && games.Count() > 0)
            {
                plays = games.Select(game =>
                {
                    return new PlayDto
                    {
                        Id = game.Id,
                        HomeTeam = game.HomeTeam,
                        HomeScore = game.HomeScore,
                        AwayTeam = game.AwayTeam,
                        AwayScore = game.AwayScore,
                        Quarter = game.Quarter,
                        QuarterSecondsRemaining = game.QuarterSecondsRemaining,
                    };
                }).ToList();

                var hubUri = new Uri(ScoreboardSettings.HubUrl ?? throw new Exception("HubUrl setting is not defined."));

                hubConnection = new HubConnectionBuilder()
                    .WithUrl(hubUri)
                    .ConfigureLogging(loggingBuilder => loggingBuilder.AddProvider(LoggerProvider)).Build();

                hubConnection.On<PlayDto>("ReceivePlay", (play) =>
                {
                    PlayDto newPlay = plays.Single(game => game.Id == play.Id);
                    newPlay.HomeScore = play.HomeScore;
                    newPlay.AwayScore = play.AwayScore;
                    newPlay.Quarter = play.Quarter;
                    newPlay.QuarterSecondsRemaining = play.QuarterSecondsRemaining;
                    newPlay.Description = play.Description;

                    StateHasChanged();
                });

                await hubConnection.StartAsync();
            }
        }
        catch (Exception ex)
        {
            errorOcurred = true;
            Logger.LogError(ex.ToString());
        }
    }
}
