@page "/game/{GameId:int}"

@using System.Net.Http
@using Football.Core.Models
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Logging
@using Scoreboard.Client.Shared.Components
@using Scoreboard.Client.ViewModels

@inject Config.AppSettings AppSettings
@inject HttpClient Http
@inject ILoggerProvider LoggerProvider
@inject ILogger<GameCast> Logger
@inject NavigationManager NavigationManager

<div class="mdc-layout-grid__inner">
    @if ((game is null || gameState is null) && !errorOcurred)
    {
        <div>Loading</div>
    }
    else if ((game is null || gameState is null) && errorOcurred)
    {
        <div>An error ocurred loading the game</div>
    }
    else if (game is not null || gameState is not null)
    {
        <!-- Title row -->
        <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-4"></div>
        <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-4">
        @if (game is not null)
            {
                <div>Game Page @game.AwayTeam vs. @game.HomeTeam</div>
            }
        </div>
        <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-4"></div>
        <!-- Game Card row -->
        <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-4"></div>
        <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-4">
        @if (gameState is not null)
            {
                <GameCard GameId="@gameState.Id" AwayTeam="@gameState.AwayTeam" AwayScore=@gameState.AwayScore
            HomeTeam="@gameState.HomeTeam" HomeScore=@gameState.HomeScore
            QuarterTimeRemaining="@gameState.QuarterTimeRemaining" />
            }
            else if (game is not null)
            {
                <GameCard GameId="@game.Id" AwayTeam="@game.AwayTeam" AwayScore=0 HomeTeam="@game.HomeTeam" HomeScore=0
            QuarterTimeRemaining="15:00" />
            }
        </div>
        <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-4"></div>
    }
</div>

@code {
    private bool errorOcurred = false;

    private Game? game = null;

    private HubConnection? hubConnection;

    private GameState? gameState = null;

    private Stat? homeStat = new Stat();

    private Stat? awayStat = new Stat();

    [Parameter]
    public int GameId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var apiUri = new Uri(AppSettings.ApiEndpoint ?? throw new Exception("ApiEndpoint missing"));
            game = await Http.GetFromJsonAsync<Game>(new Uri(apiUri, $"games/{GameId}"));

            if (game is not null)
            {
                gameState = new GameState
                {
                    Id = game.Id,
                    Week = game.Week,
                    Quarter = 1,
                    QuarterSecondsRemaining = 900,
                    HomeTeam = game.HomeTeam,
                    HomeScore = 0,
                    AwayTeam = game.AwayTeam,
                    AwayScore = 0
                };

                var gameStats = await Http.GetFromJsonAsync<Stat[]>(new Uri(apiUri, $"stats/{GameId}"));
                if (gameStats is not null && gameStats.Count() > 0)
                {
                    homeStat = gameStats.FirstOrDefault(g => g.Team == game.HomeTeam);
                    awayStat = gameStats.FirstOrDefault(g => g.Team == game.AwayTeam);
                }
            }

            @* var gameStats = await Http.GetFromJsonAsync<Stat[]>($"https://localhost:11517/api/football/stats/{GameId}");
                if (gameStats is not null && gameStats.Count() > 0)
                {
                homeStat = gameStats.FirstOrDefault(g => g.Team == game.HomeTeam);
                awayStat = gameStats.FirstOrDefault(g => g.Team == game.AwayTeam);

                Uri hubUri = new Uri(AppSettings.HubEndpoint);

                hubConnection = new HubConnectionBuilder().WithUrl(hubUri).ConfigureLogging(logging =>
                logging.AddProvider(LoggerProvider)).Build();

                hubConnection.On<Play>("ReceivePlay", (play) =>
                {
                if (GameId == play.Game.Id)
                {
                gameState = new GameState
                {
                HomeTeam = homeStat.Team,
                HomeScore = play.HomeScore,
                AwayTeam = awayStat.Team,
                AwayScore = play.AwayScore,
                Quarter = play.Quarter,
                QuarterSecondsRemaining = play.QuarterSecondsRemaining,
                Description = play.Description
                };
                };

                StateHasChanged();
                });

                await hubConnection.StartAsync();
                }
                else
                {
                startedGame = false;
                } *@
        }
        catch (Exception ex)
        {
            errorOcurred = true;
            Logger.LogError(ex.ToString());
        }
    }
}
