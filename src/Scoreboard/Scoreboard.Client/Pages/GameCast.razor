@page "/game/{GameId:int}"

@using System.Net.Http
@using Football.Core.Models
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Logging
@using Scoreboard.Client.Shared.Components
@using Scoreboard.Client.ViewModels

@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject ILoggerProvider LoggerProvider
@inject ILogger<GameCast> logger
@inject Config.AppSettings AppSettings

<div class="mdc-layout-grid__inner">
    <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-2"></div>
    <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-8">
        Game Page @GameId
    </div>
    <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-2"></div>
    <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-2"></div>
    <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-8">
        @if (game == null && !errorOcurred)
        {
            <div>Loading</div>
        }
        else if (game == null && errorOcurred)
        {
            <div>An error ocurred loading the game</div>
        }
        else if (game != null)
        {
            <GameCard GameId="@game.Id" AwayTeam="@game.AwayTeam" AwayScore=0 HomeTeam="@game.HomeTeam" HomeScore=0
            QuarterTimeRemaining="0" />
        }
    </div>
    <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-2"></div>
</div>

@code {
    private bool gameStarted = true;

    private bool errorOcurred = false;

    private HubConnection? hubConnection;

    private Game? game = null;

    private GameState? gameState = null;

    private Stat? homeStat = new Stat();

    private Stat? awayStat = new Stat();

    [Parameter]
    public int GameId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            game = await Http.GetFromJsonAsync<Game>($"https://localhost:11517/api/football/games/{GameId}");

            @* var gameStats = await Http.GetFromJsonAsync<Stat[]>($"https://localhost:11517/api/football/stats/{GameId}");
                if (gameStats != null && gameStats.Count() > 0)
                {
                homeStat = gameStats.FirstOrDefault(g => g.Team == game.HomeTeam);
                awayStat = gameStats.FirstOrDefault(g => g.Team == game.AwayTeam);

                Uri hubUri = new Uri(AppSettings.HubEndpoint);

                hubConnection = new HubConnectionBuilder().WithUrl(hubUri).ConfigureLogging(logging =>
                logging.AddProvider(LoggerProvider)).Build();

                hubConnection.On<Play>("ReceivePlay", (play) =>
                {
                if (GameId == play.Game.Id)
                {
                gameState = new GameState
                {
                HomeTeam = homeStat.Team,
                HomeScore = play.HomeScore,
                AwayTeam = awayStat.Team,
                AwayScore = play.AwayScore,
                Quarter = play.Quarter,
                QuarterSecondsRemaining = play.QuarterSecondsRemaining,
                Description = play.Description
                };
                };

                StateHasChanged();
                });

                await hubConnection.StartAsync();
                }
                else
                {
                startedGame = false;
                } *@
        }
        catch (Exception ex)
        {
            errorOcurred = true;
            logger.LogError(ex.ToString());
        }
    }
}
