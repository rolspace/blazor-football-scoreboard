@page "/game/{GameId:int}"

@using System.Linq;
@using System.Net.Http
@using Football.Core.Models
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Logging
@using Scoreboard.Client.ViewModels

@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject ILoggerProvider LoggerProvider
@inject ILogger<GameCast> logger

<div>
    <div class="mdc-layout-grid__inner">
        <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-12">
            Game Page @GameId
        </div>
    </div>
    <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-12">
        @if (gameState == null)
        {
            <div class="mdc-card score-card">
                <div class="mdc-card__primary">
                    <div class="mdc-layout-grid__inner">
                        <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-2" style="display:inline-block">
                            @awayStat?.Team</div>
                        <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-10 score-card__score"
                        style="display:inline-block">@awayStat?.Score</div>
                    </div>
                    <div class="mdc-layout-grid__inner">
                        <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-2" style="display:inline-block">
                            @homeStat?.Team</div>
                        <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-10 score-card__score"
                        style="display:inline-block">@homeStat?.Score</div>
                    </div>
                </div>
                <div class="mdc-card__secondary">
                    <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-12">
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="mdc-card score-card">
                <div class="mdc-card__primary">
                    <div class="mdc-layout-grid__inner">
                        <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-2" style="display:inline-block">
                            @gameState.AwayTeam</div>
                        <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-10 score-card__score"
                        style="display:inline-block">@gameState.AwayScore</div>
                    </div>
                    <div class="mdc-layout-grid__inner">
                        <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-2" style="display:inline-block">
                            @gameState.HomeTeam</div>
                        <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-10 score-card__score"
                        style="display:inline-block">@gameState.HomeScore</div>
                    </div>
                </div>
                <div class="mdc-card__secondary">
                    <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-12">
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private HubConnection? hubConnection;
    private Stat homeStat = new Stat();
    private Stat awayStat = new Stat();

    private GameState? gameState = null;

    [Parameter]
    public int GameId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var gameStats = await Http.GetFromJsonAsync<Stat[]>($"https://localhost:11517/api/football/stat/{GameId}");

            if (gameStats == null) return;

            //homeStat = gameStats.FirstOrDefault(g => g.Team == HomeTeam);
            //awayStat = gameStats.FirstOrDefault(g => g.Team == AwayTeam);

            hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/gamehub"))
            .ConfigureLogging(logging => logging.AddProvider(LoggerProvider))
            .Build();

            /* hubConnection.On<Play>("ReceivePlay", (play) =>
            {
            if (GameId == play.Game.Id)
            {
            gameState = new GameState
            {
            HomeTeam = homeStat.Team,
            HomeScore = play.HomeScore,
            AwayTeam = awayStat.Team,
            AwayScore = play.AwayScore,
            Quarter = play.Quarter,
            QuarterSecondsRemaining = play.QuarterSecondsRemaining,
            Description = play.Description
            };
            };

            StateHasChanged();
            }); */

            await hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            logger.LogError(ex.ToString());
        }
    }
}
