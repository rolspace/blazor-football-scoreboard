@page "/"

@using System.Net.Http
@using Core.Entities
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Logging
@using Scoreboard.Client.ViewModels

@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject ILoggerProvider LoggerProvider

<div>
    <div class="mdc-layout-grid__inner">
        <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-12">
            <h1>Scoreboard</h1>
        </div>
        <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-12">
            <div class="mdc-layout-grid__inner score-grid">
                @foreach (var gameState in gameStates)
                {
                    <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-6">
                        <a href="game/@gameState.Id">
                            <div class="mdc-card score-card">
                                <div class="mdc-card__primary">
                                    <div class="mdc-layout-grid__inner">
                                        <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-2" style="display:inline-block">@gameState.HomeTeam</div>
                                        <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-10 score-card__score" style="display:inline-block">@gameState.HomeScore</div>
                                    </div>
                                    <div class="mdc-layout-grid__inner">
                                        <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-2" style="display:inline-block">@gameState.AwayTeam</div>
                                        <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-10 score-card__score" style="display:inline-block">@gameState.AwayScore</div>
                                    </div>
                                </div>
                                <div class="mdc-card__secondary">
                                    <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-12">
                                        @gameState.QuarterTimeRemaining
                                    </div>
                                </div>
                            </div>
                        </a>
                    </div>
                }
            </div>
        </div>
        <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-1"></div>
    </div>
</div>

@code {
    private HubConnection hubConnection;
    private IReadOnlyList<GameState> gameStates = new List<GameState>();

    protected override async Task OnInitializedAsync()
    {
        // TODO: check best practice for error handling in this method
        try
        {
            var weekGames = await Http.GetFromJsonAsync<Game[]>("api/game/week/1");
            gameStates = weekGames.Select(g => new GameState {
                Id = g.Id,
                Week = g.Week,
                Quarter = 1,
                QuarterSecondsRemaining = 900,
                HomeTeam = g.HomeTeam,
                HomeScore = 0,
                AwayTeam = g.AwayTeam,
                AwayScore = 0
            }).ToList();

            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/gamehub"))
                .ConfigureLogging(logging => logging.AddProvider(LoggerProvider))
                .Build();

            hubConnection.On<Play>("ReceivePlay", (play) =>
            {
                var game = gameStates.Single(game => game.Id == play.GameId);
                game.HomeScore = play.TotalHomeScore ?? game.HomeScore;
                game.AwayScore = play.TotalAwayScore ?? game.AwayScore;
                game.Quarter = play.Qtr;
                game.QuarterSecondsRemaining = play.QuarterSecondsRemaining ?? game.QuarterSecondsRemaining;
                game.Description = play.Desc;

                StateHasChanged();
            });

            await hubConnection.StartAsync();
        }
        catch (Exception e)
        {

        }
    }
}
